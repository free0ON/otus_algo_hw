name: CMake
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  PRJ_NAME: "otus_algo_hw_01" # name without spaces
  PRJ_VERSION_MAJOR: 0
  PRJ_VERSION_MINOR: 1
  PRJ_VERSION_PATCH: ${{ github.run_number }}
  PRJ_DESCRIPTION: "otus_aloritms_and_data_structures_course_homework" # description without spaces
  PRJ_HOMEPAGE_URL: "${{ github.repositoryUrl }}"
  PRJ_PATH: "${{github.workspace}}/otus_algo_hw_01"
  PRJ_CMAKE_MIN_VERSION: 3.2
  EMAIL_CONTACT: dmitrii.lozovoi@yandex.ru
  GOOGLE_TEST: OFF
  BUILD_TYPE: Release
on:
  push:
    branches: [ "otus_algo_hw_01" ]
  pull_request:
    branches: [ "otus_algo_hw_01" ]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#      run: cmake -B ${{github.workspace}}/${{ env.PRJ_NAME }}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      run: |
        cd ${{ env.PRJ_PATH }}
        mkdir build 
        cmake ${{ env.PRJ_PATH }} -B ${{ env.PRJ_PATH }}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
        -DPRJ_NAME=${{ env.PRJ_NAME }} \
        -DPRJ_VERSION_MAJOR=${{ env.PRJ_VERSION_MAJOR }} \
        -DPRJ_VERSION_MINOR=${{ env.PRJ_VERSION_MINOR }} \
        -DPRJ_VERSION_PATCH=${{ env.PRJ_VERSION_PATCH }} \
        -DPRJ_DESCRIPTION=${{ env.PRJ_DESCRIPTION }} \
        -DPRJ_HOMEPAGE_URL=${{ env.PRJ_HOMEPAGE_URL }} \
        -DPRJ_CMAKE_MIN_VERSION=${{ env.PRJ_CMAKE_MIN_VERSION }} \
        -DEMAIL_CONTACT=${{ env.EMAIL_CONTACT }} \
        -DGOOGLE_TEST=${{ env.GOOGLE_TEST }}
#    - name: Build
#      # Build your program with the given configuration
#      run: cmake --build ${{github.workspace}}/${{ env.PRJ_NAME }}/build --config ${{env.BUILD_TYPE}}

#    - name: Test
#      working-directory: ${{github.workspace}}/${{ env.PRJ_NAME }}/build
#      # Execute tests defined by the CMake configuration.
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest -C ${{env.BUILD_TYPE}}
    - name: Build package
      run: cmake --build ${{ ENV.PRJ_PATH }}/build --target package
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.PRJ_NAME }}_${{ env.PRJ_VERSION_MAJOR}}${{ env.PRJ_VERSION_MINOR}}_${{ env.PRJ_VERSION_PATCH }}-Linux
        release_name: Release ${{ env.PRJ_NAME }}_${{ env.PRJ_VERSION_MAJOR}}${{ env.PRJ_VERSION_MINOR}}_${{ env.PRJ_VERSION_PATCH }}-Linux
        draft: false
        prerelease: false

        # Upload release
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/${{ env.PRJ_NAME }}/${{ env.PRJ_NAME }}-${{ env.PRJ_VERSION_MAJOR}}.${{ env.PRJ_VERSION_MINOR}}.${{ env.PRJ_VERSION_PATCH}}-Linux.deb
        asset_name: ${{ env.PRJ_NAME }}-${{ env.PRJ_VERSION_MAJOR}}.${{ env.PRJ_VERSION_MINOR}}.${{ env.PRJ_VERSION_PATCH }}-Linux.deb
        asset_content_type: application/vnd.debian.binary-package